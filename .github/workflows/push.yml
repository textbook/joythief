name: "CI"

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/setup-python@v5"
        with:
          python-version: "3.13"
      - run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install poetry
      - uses: "actions/cache@v4"
        with:
          key: "${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}"
          path: "./.venv"
      - run: "poetry check --strict"
      - run: "poetry sync"
        env:
          POETRY_VIRTUALENVS_CREATE: "true"
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
      - run: "poetry run black --check src/ tests/"
      - run: "poetry run isort --check src/ tests/"
      - run: "poetry run mypy src/ tests/"

  test:
    runs-on: "ubuntu-latest"
    needs:
      - "lint"
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
          - "3.14"
    steps:
      - uses: "actions/checkout@v4"
      - uses: "actions/setup-python@v5"
        with:
          python-version: "${{ matrix.python-version }}"
      - run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          pipx install poetry
      - uses: "actions/cache/restore@v4"
        with:
          key: "${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}"
          path: "./.venv"
      - run: "poetry sync"
        env:
          POETRY_VIRTUALENVS_CREATE: "true"
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
      - run: "poetry run coverage run -m pytest"
      - run: "poetry run coverage report"
